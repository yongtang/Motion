        import time
        
        async def run_isaac(session: str, channel: Channel):
            sub = await channel.subscribe_step(session)
            print(f"[motion.extension] subscribed step for session={session}")
        
            last = time.perf_counter()
        
            try:
                while True:
                    # ---- drift probe (inline) ----
                    now = time.perf_counter()
                    drift = now - last - 1.0   # expected ~1.0s
                    if drift > 0.05:
                        print(f"[motion.extension][DRIFT] loop delayed by {drift:.3f}s")
                    last = now
                    # -----------------------------
        
                    payload = json.dumps({"session": session})
                    await channel.publish_data(session, payload)
                    await asyncio.sleep(1.0)
            finally:
                with contextlib.suppress(Exception):
                    await sub.unsubscribe()
                print(f"[motion.extension] unsubscribed step for session={session}")
        
